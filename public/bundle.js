(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{"default":e}}function _taggedTemplateLiteral(e,t){return Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}Object.defineProperty(exports,"__esModule",{value:!0});var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol?"symbol":typeof e},_templateObject=_taggedTemplateLiteral(["\n      <div class='main'>\n        <h1>MTG table</h1>\n        <button \n          class=\"refresh ",'"\n          onclick=','\n        >\n          <i class="fa fa-refresh ',"\" aria-hidden=\"true\"></i>\n        </button>\n        <input \n          type='text'\n          placeholder='filter'\n          oninput=",'\n        />\n\n        <table class="u-full-width">\n          <tbody>\n            ',"\n\n          </tbody>\n        </table>       \n      </div>\n    "],["\n      <div class='main'>\n        <h1>MTG table</h1>\n        <button \n          class=\"refresh ",'"\n          onclick=','\n        >\n          <i class="fa fa-refresh ',"\" aria-hidden=\"true\"></i>\n        </button>\n        <input \n          type='text'\n          placeholder='filter'\n          oninput=",'\n        />\n\n        <table class="u-full-width">\n          <tbody>\n            ',"\n\n          </tbody>\n        </table>       \n      </div>\n    "]),_templateObject2=_taggedTemplateLiteral(["\n              <tr>\n                "," \n              </tr>\n            "],["\n              <tr>\n                "," \n              </tr>\n            "]),_templateObject3=_taggedTemplateLiteral(["<td>","</td>"],["<td>","</td>"]),_inu=require("inu"),_yoYo=require("yo-yo"),_yoYo2=_interopRequireDefault(_yoYo),_pullDefer=require("pull-defer"),_pullDefer2=_interopRequireDefault(_pullDefer),_xhr=require("xhr"),_xhr2=_interopRequireDefault(_xhr),INITIAL_MODEL={refreshing:!1,pairings:[],filter:void 0,visibleColumns:["Table","Player","Team","Points","Points-"]},FETCH_PAIRINGS="FETCH_PAIRINGS",REFRESH_PAIRINGS="REFRESH_PAIRINGS",UPDATE_PAIRINGS="UPDATE_PAIRINGS",ADD_FILTER="ADD_FILTER",App={init:function(){return{model:INITIAL_MODEL,effect:{type:FETCH_PAIRINGS}}},update:function(e,t){switch(t.type){case REFRESH_PAIRINGS:return{model:Object.assign({},e,{refreshing:!0}),effect:{type:FETCH_PAIRINGS}};case UPDATE_PAIRINGS:var n=Object.assign({},e,{refreshing:!1});return n.pairings=t.pairings,{model:n};case ADD_FILTER:var r=t.filter?new RegExp(t.filter.split("").join(".*"),"i"):void 0;return{model:Object.assign({},e,{filter:r})};default:return{model:e}}},view:function(e,t){var n=e.filter?e.pairings.filter(function(t){return t.Player.match(e.filter)}):e.pairings,r=Object.keys(n[0]||[]),i=e.visibleColumns.filter(function(e){return r.indexOf(e)>-1});return(0,_yoYo2["default"])(_templateObject,e.refreshing?"button-primary":"",function(){return t({type:REFRESH_PAIRINGS})},e.refreshing?"fa-spin":"",function(e){return t({type:ADD_FILTER,filter:e.target.value})},n.map(function(e){return(0,_yoYo2["default"])(_templateObject2,i.map(function(t){return(0,_yoYo2["default"])(_templateObject3,e[t])}))}))},run:function(e){var t=function(){switch(e.type){case FETCH_PAIRINGS:var t=_pullDefer2["default"].source();return _xhr2["default"].get("/data",function(e,n){e&&console.log(e);var r=JSON.parse(n.body),i=r.pairings;console.log(JSON.stringify(r,null,2)),t.resolve(_inu.pull.values([{type:UPDATE_PAIRINGS,pairings:i}]))}),{v:t};default:console.log("some unmatched effect",e)}}();if("object"===("undefined"==typeof t?"undefined":_typeof(t)))return t.v}};exports["default"]=App;

},{"inu":12,"pull-defer":22,"xhr":60,"yo-yo":62}],2:[function(require,module,exports){
"use strict";function _interopRequireDefault(e){return e&&e.__esModule?e:{"default":e}}var _inu=require("inu"),_yoYo=require("yo-yo"),_yoYo2=_interopRequireDefault(_yoYo),_App=require("./App"),_App2=_interopRequireDefault(_App),_start=(0,_inu.start)(_App2["default"]),views=_start.views,main=document.querySelector(".main");(0,_inu.pull)(views(),_inu.pull.drain(function(e){_yoYo2["default"].update(main,e)}));

},{"./App":1,"inu":12,"yo-yo":62}],3:[function(require,module,exports){
function belCreateElement(e,t,a){function n(e){if(Array.isArray(e))for(var t=0;t<e.length;t++){var a=e[t];if(Array.isArray(a))n(a);else{if(("number"==typeof a||"boolean"==typeof a||a instanceof Date||a instanceof RegExp)&&(a=a.toString()),"string"==typeof a){if(o.lastChild&&"#text"===o.lastChild.nodeName){o.lastChild.nodeValue+=a;continue}a=document.createTextNode(a)}a&&a.nodeType&&o.appendChild(a)}}}var o;SVG_TAGS.indexOf(e)!==-1&&(t.namespace=SVGNS);var l=!1;if(t.namespace&&(l=t.namespace,delete t.namespace),o=l?document.createElementNS(l,e):document.createElement(e),t.onload||t.onunload){var r=t.onload||function(){},i=t.onunload||function(){};onload(o,function(){r(o)},function(){i(o)},belCreateElement.caller.caller.caller),delete t.onload,delete t.onunload}for(var f in t)if(t.hasOwnProperty(f)){var c=f.toLowerCase(),s=t[f];if("classname"===c&&(c="class",f="class"),"htmlFor"===f&&(f="for"),BOOL_PROPS[c])if("true"===s)s=c;else if("false"===s)continue;"on"===c.slice(0,2)?o[f]=s:l?o.setAttributeNS(null,f,s):o.setAttribute(f,s)}return n(a),o}var document=require("global/document"),hyperx=require("hyperx"),onload=require("on-load"),SVGNS="http://www.w3.org/2000/svg",BOOL_PROPS={autofocus:1,checked:1,defaultchecked:1,disabled:1,formnovalidate:1,indeterminate:1,readonly:1,required:1,selected:1,willvalidate:1},SVG_TAGS=["svg","altGlyph","altGlyphDef","altGlyphItem","animate","animateColor","animateMotion","animateTransform","circle","clipPath","color-profile","cursor","defs","desc","ellipse","feBlend","feColorMatrix","feComponentTransfer","feComposite","feConvolveMatrix","feDiffuseLighting","feDisplacementMap","feDistantLight","feFlood","feFuncA","feFuncB","feFuncG","feFuncR","feGaussianBlur","feImage","feMerge","feMergeNode","feMorphology","feOffset","fePointLight","feSpecularLighting","feSpotLight","feTile","feTurbulence","filter","font","font-face","font-face-format","font-face-name","font-face-src","font-face-uri","foreignObject","g","glyph","glyphRef","hkern","image","line","linearGradient","marker","mask","metadata","missing-glyph","mpath","path","pattern","polygon","polyline","radialGradient","rect","set","stop","switch","symbol","text","textPath","title","tref","tspan","use","view","vkern"];module.exports=hyperx(belCreateElement),module.exports.createElement=belCreateElement;

},{"global/document":7,"hyperx":10,"on-load":17}],4:[function(require,module,exports){

},{}],5:[function(require,module,exports){
module.exports=function(){for(var o=0;o<arguments.length;o++)if(void 0!==arguments[o])return arguments[o]};

},{}],6:[function(require,module,exports){
function forEach(r,t,o){if(!isFunction(t))throw new TypeError("iterator must be a function");arguments.length<3&&(o=this),"[object Array]"===toString.call(r)?forEachArray(r,t,o):"string"==typeof r?forEachString(r,t,o):forEachObject(r,t,o)}function forEachArray(r,t,o){for(var n=0,a=r.length;n<a;n++)hasOwnProperty.call(r,n)&&t.call(o,r[n],n,r)}function forEachString(r,t,o){for(var n=0,a=r.length;n<a;n++)t.call(o,r.charAt(n),n,r)}function forEachObject(r,t,o){for(var n in r)hasOwnProperty.call(r,n)&&t.call(o,r[n],n,r)}var isFunction=require("is-function");module.exports=forEach;var toString=Object.prototype.toString,hasOwnProperty=Object.prototype.hasOwnProperty;

},{"is-function":15}],7:[function(require,module,exports){
(function (global){
var topLevel="undefined"!=typeof global?global:"undefined"!=typeof window?window:{},minDoc=require("min-document");if("undefined"!=typeof document)module.exports=document;else{var doccy=topLevel["__GLOBAL_DOCUMENT_CACHE@4"];doccy||(doccy=topLevel["__GLOBAL_DOCUMENT_CACHE@4"]=minDoc),module.exports=doccy}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"min-document":4}],8:[function(require,module,exports){
(function (global){
"undefined"!=typeof window?module.exports=window:"undefined"!=typeof global?module.exports=global:"undefined"!=typeof self?module.exports=self:module.exports={};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],9:[function(require,module,exports){
function attributeToProperty(r){return function(t,o,e){for(var n in o)n in transform&&(o[transform[n]]=o[n],delete o[n]);return r(t,o,e)}}module.exports=attributeToProperty;var transform={"class":"className","for":"htmlFor","http-equiv":"httpEquiv"};

},{}],10:[function(require,module,exports){
function quot(T){return T===ATTR_VALUE_SQ||T===ATTR_VALUE_DQ}function has(T,e){return hasOwn.call(T,e)}function selfClosing(T){return closeRE.test(T)}var attrToProp=require("hyperscript-attribute-to-property"),VAR=0,TEXT=1,OPEN=2,CLOSE=3,ATTR=4,ATTR_KEY=5,ATTR_KEY_W=6,ATTR_VALUE_W=7,ATTR_VALUE=8,ATTR_VALUE_SQ=9,ATTR_VALUE_DQ=10,ATTR_EQ=11,ATTR_BREAK=12;module.exports=function(T,e){function A(T){return"function"==typeof T?T:"string"==typeof T?T:T&&"object"==typeof T?T:t("",T)}T=attrToProp(T),e||(e={});var t=e.concat||function(T,e){return String(T)+String(e)};return function(e){function n(T){var e=[];r===ATTR_VALUE_W&&(r=ATTR);for(var A=0;A<T.length;A++){var t=T.charAt(A);r===TEXT&&"<"===t?(R.length&&e.push([TEXT,R]),R="",r=OPEN):">"!==t||quot(r)?r===TEXT?R+=t:r===OPEN&&/\s/.test(t)?(e.push([OPEN,R]),R="",r=ATTR):r===OPEN?R+=t:r===ATTR&&/[\w-]/.test(t)?(r=ATTR_KEY,R=t):r===ATTR&&/\s/.test(t)?(R.length&&e.push([ATTR_KEY,R]),e.push([ATTR_BREAK])):r===ATTR_KEY&&/\s/.test(t)?(e.push([ATTR_KEY,R]),R="",r=ATTR_KEY_W):r===ATTR_KEY&&"="===t?(e.push([ATTR_KEY,R],[ATTR_EQ]),R="",r=ATTR_VALUE_W):r===ATTR_KEY?R+=t:r!==ATTR_KEY_W&&r!==ATTR||"="!==t?r!==ATTR_KEY_W&&r!==ATTR||/\s/.test(t)?r===ATTR_VALUE_W&&'"'===t?r=ATTR_VALUE_DQ:r===ATTR_VALUE_W&&"'"===t?r=ATTR_VALUE_SQ:r===ATTR_VALUE_DQ&&'"'===t?(e.push([ATTR_VALUE,R],[ATTR_BREAK]),R="",r=ATTR):r===ATTR_VALUE_SQ&&"'"===t?(e.push([ATTR_VALUE,R],[ATTR_BREAK]),R="",r=ATTR):r!==ATTR_VALUE_W||/\s/.test(t)?r===ATTR_VALUE&&/\s/.test(t)?(e.push([ATTR_VALUE,R],[ATTR_BREAK]),R="",r=ATTR):r!==ATTR_VALUE&&r!==ATTR_VALUE_SQ&&r!==ATTR_VALUE_DQ||(R+=t):(r=ATTR_VALUE,A--):(e.push([ATTR_BREAK]),/[\w-]/.test(t)?(R+=t,r=ATTR_KEY):r=ATTR):(e.push([ATTR_EQ]),r=ATTR_VALUE_W):(r===OPEN?e.push([OPEN,R]):r===ATTR_KEY?e.push([ATTR_KEY,R]):r===ATTR_VALUE&&R.length&&e.push([ATTR_VALUE,R]),e.push([CLOSE]),R="",r=TEXT)}return r===TEXT&&R.length?(e.push([TEXT,R]),R=""):r===ATTR_VALUE&&R.length?(e.push([ATTR_VALUE,R]),R=""):r===ATTR_VALUE_DQ&&R.length?(e.push([ATTR_VALUE,R]),R=""):r===ATTR_VALUE_SQ&&R.length?(e.push([ATTR_VALUE,R]),R=""):r===ATTR_KEY&&(e.push([ATTR_KEY,R]),R=""),e}for(var r=TEXT,R="",E=arguments.length,_=[],s=0;s<e.length;s++)if(s<E-1){var o=arguments[s+1],l=n(e[s]),f=r;f===ATTR_VALUE_DQ&&(f=ATTR_VALUE),f===ATTR_VALUE_SQ&&(f=ATTR_VALUE),f===ATTR_VALUE_W&&(f=ATTR_VALUE),f===ATTR&&(f=ATTR_KEY),l.push([VAR,f,o]),_.push.apply(_,l)}else _.push.apply(_,n(e[s]));for(var h=[null,{},[]],i=[[h,-1]],s=0;s<_.length;s++){var a=i[i.length-1][0],l=_[s],p=l[0];if(p===OPEN&&/^\//.test(l[1])){var u=i[i.length-1][1];i.length>1&&(i.pop(),i[i.length-1][0][2][u]=T(a[0],a[1],a[2].length?a[2]:void 0))}else if(p===OPEN){var g=[l[1],{},[]];a[2].push(g),i.push([g,a[2].length-1])}else if(p===ATTR_KEY||p===VAR&&l[1]===ATTR_KEY){for(var L,V="";s<_.length;s++)if(_[s][0]===ATTR_KEY)V=t(V,_[s][1]);else{if(_[s][0]!==VAR||_[s][1]!==ATTR_KEY)break;if("object"!=typeof _[s][2]||V)V=t(V,_[s][2]);else for(L in _[s][2])_[s][2].hasOwnProperty(L)&&!a[1][L]&&(a[1][L]=_[s][2][L])}_[s][0]===ATTR_EQ&&s++;for(var U=s;s<_.length;s++)if(_[s][0]===ATTR_VALUE||_[s][0]===ATTR_KEY)a[1][V]?a[1][V]=t(a[1][V],_[s][1]):a[1][V]=A(_[s][1]);else{if(_[s][0]!==VAR||_[s][1]!==ATTR_VALUE&&_[s][1]!==ATTR_KEY){!V.length||a[1][V]||s!==U||_[s][0]!==CLOSE&&_[s][0]!==ATTR_BREAK||(a[1][V]=V.toLowerCase());break}a[1][V]?a[1][V]=t(a[1][V],_[s][2]):a[1][V]=A(_[s][2])}}else if(p===ATTR_KEY)a[1][l[1]]=!0;else if(p===VAR&&l[1]===ATTR_KEY)a[1][l[2]]=!0;else if(p===CLOSE){if(selfClosing(a[0])&&i.length){var u=i[i.length-1][1];i.pop(),i[i.length-1][0][2][u]=T(a[0],a[1],a[2].length?a[2]:void 0)}}else if(p===VAR&&l[1]===TEXT)void 0===l[2]||null===l[2]?l[2]="":l[2]||(l[2]=t("",l[2])),Array.isArray(l[2][0])?a[2].push.apply(a[2],l[2]):a[2].push(l[2]);else if(p===TEXT)a[2].push(l[1]);else if(p!==ATTR_EQ&&p!==ATTR_BREAK)throw new Error("unhandled: "+p)}if(h[2].length>1&&/^\s*$/.test(h[2][0])&&h[2].shift(),h[2].length>2||2===h[2].length&&/\S/.test(h[2][1]))throw new Error("multiple root elements must be wrapped in an enclosing tag");return Array.isArray(h[2][0])&&"string"==typeof h[2][0][0]&&Array.isArray(h[2][0][2])&&(h[2][0]=T(h[2][0][0],h[2][0][1],h[2][0][2])),h[2][0]}};var hasOwn=Object.prototype.hasOwnProperty,closeRE=RegExp("^("+["area","base","basefont","bgsound","br","col","command","embed","frame","hr","img","input","isindex","keygen","link","meta","param","source","track","wbr","animate","animateTransform","circle","cursor","desc","ellipse","feBlend","feColorMatrix","feComponentTransfer","feComposite","feConvolveMatrix","feDiffuseLighting","feDisplacementMap","feDistantLight","feFlood","feFuncA","feFuncB","feFuncG","feFuncR","feGaussianBlur","feImage","feMergeNode","feMorphology","feOffset","fePointLight","feSpecularLighting","feSpotLight","feTile","feTurbulence","font-face-format","font-face-name","font-face-uri","glyph","glyphRef","hkern","image","line","missing-glyph","mpath","path","polygon","polyline","rect","set","stop","tref","use","view","vkern"].join("|")+")(?:[.#][a-zA-Z0-9-￿_:-]+)*$");

},{"hyperscript-attribute-to-property":9}],11:[function(require,module,exports){
module.exports=require("yo-yo");

},{"yo-yo":62}],12:[function(require,module,exports){
module.exports={start:require("./start"),pull:require("./pull"),html:require("./html")};

},{"./html":11,"./pull":13,"./start":14}],13:[function(require,module,exports){
module.exports=require("pull-stream");

},{"pull-stream":28}],14:[function(require,module,exports){
(function (process){
function start(n){function l(n){f(n)}function t(){Object.keys(v).forEach(function(n){v[n].end()})}n=defined(n,{});var e=defined(n.init,defaultInit),u=defined(n.update,defaultUpdate),i=defined(n.view,noop),r=defined(n.run,noop),f=notify(),a=e.call(n),o=notify();pull(f.listen(),scan(a,function(l,t){return u.call(n,l.model,t)}),pull.drain(o));var c=notify();pull(o.listen(),pull.map(function(n){return n.model}),difference(),pull.drain(c));var p=notify();pull(c.listen(),pull.map(function(t){return i.call(n,t,l)}),pull.filter(isNotNil),pull.drain(p));var d=notify();pull(o.listen(),pull.map(function(n){return n.effect}),pull.filter(isNotNil),pull.drain(d));var s=notify(),v={actions:f,states:o,models:c,views:p,effects:d,effectActionsSources:s},y={};return Object.keys(v).forEach(function(n){var l=v[n].listen;y[n]=["states","models","effects","views"].indexOf(n)!==-1?replayLastValue(l):l}),pull(d.listen(),pull.map(function(l){return r.call(n,l,y)}),pull.filter(isNotNil),pull.drain(s)),pull(s.listen(),drainMany(f)),process.nextTick(function(){o(a)}),Object.assign({},y,{stop:t})}function noop(){}function isNotNil(n){return null!=n}function defaultInit(){return{model:null}}function defaultUpdate(n){return{model:n}}function scan(n,l){return pull.map(function(t){return n=l(n,t)})}function difference(){var n;return pull.filter(function(l){var t=l!==n;return n=l,t})}function drainMany(n){return function(l){pull(l,pull.drain(function(l){pull(l,pull.drain(n))}))}}function replayLastValue(n){var l;return pull(n(),pull.drain(function(n){l=n})),function(){return cat([null==l?void 0:pull.values([l]),n()])}}var defined=require("defined"),pull=require("pull-stream"),notify=require("pull-notify"),cat=require("pull-cat");module.exports=start;

}).call(this,require('_process'))

},{"_process":19,"defined":5,"pull-cat":20,"pull-notify":26,"pull-stream":28}],15:[function(require,module,exports){
function isFunction(o){var t=toString.call(o);return"[object Function]"===t||"function"==typeof o&&"[object RegExp]"!==t||"undefined"!=typeof window&&(o===window.setTimeout||o===window.alert||o===window.confirm||o===window.prompt)}module.exports=isFunction;var toString=Object.prototype.toString;

},{}],16:[function(require,module,exports){
function empty(e){for(var t in e)if(e.hasOwnProperty(t))return!1;return!0}function toElement(e){!range&&document.createRange&&(range=document.createRange(),range.selectNode(document.body));var t;return range&&range.createContextualFragment?t=range.createContextualFragment(e):(t=document.createElement("body"),t.innerHTML=e),t.childNodes[0]}function noop(){}function createElementNS(e,t){return t&&t!==XHTML?document.createElementNS(t,e):document.createElement(e)}function morphAttrs(e,t){var n,r,o,a,i,d,l=t.attributes;for(n=l.length-1;n>=0;n--)r=l[n],o=r.name,i=r.value,a=r.namespaceURI,a?(o=r.localName||o,d=e.getAttributeNS(a,o)):d=e.getAttribute(o),d!==i&&(a?e.setAttributeNS(a,o,i):e.setAttribute(o,i));for(l=e.attributes,n=l.length-1;n>=0;n--)r=l[n],r.specified!==!1&&(o=r.name,a=r.namespaceURI,hasAttributeNS(t,a,a?o=r.localName||o:o)||(a?e.removeAttributeNS(a,r.localName):e.removeAttribute(o)))}function moveChildren(e,t){for(var n=e.firstChild;n;){var r=n.nextSibling;t.appendChild(n),n=r}return t}function defaultGetNodeKey(e){return e.id}function morphdom(e,t,n){function r(e,t){var n=c(e);if(n?l[n]=e:t||p(e),e.nodeType===ELEMENT_NODE)for(var o=e.firstChild;o;)r(o,t||n),o=o.nextSibling}function o(e){if(e.nodeType===ELEMENT_NODE)for(var t=e.firstChild;t;)c(t)||(p(t),o(t)),t=t.nextSibling}function a(e,t,n){E(e)!==!1&&(t.removeChild(e),n?c(e)||(p(e),o(e)):r(e))}function i(e,t,n,r){var o=c(t);if(o&&delete l[o],!r){if(m(e,t)===!1)return;if(morphAttrs(e,t),s(e),h(e,t)===!1)return}if("TEXTAREA"!==e.nodeName){var d,E,v,T,A,g=t.firstChild,C=e.firstChild;e:for(;g;){for(v=g.nextSibling,d=c(g);C;){var y=c(C);if(E=C.nextSibling,!n&&y&&(A=u[y]))A.parentNode.replaceChild(C,A),i(C,A,n),C=E;else{var O=C.nodeType;if(O===g.nodeType){var M=!1;if(O===ELEMENT_NODE?(compareNodeNames(C,g)&&(y||d?d===y&&(M=!0):M=!0),M&&i(C,g,n)):O!==TEXT_NODE&&O!=COMMENT_NODE||(M=!0,C.nodeValue=g.nodeValue),M){g=v,C=E;continue e}}a(C,e,n),C=E}}d&&((T=l[d])?compareNodeNames(T,g)?(i(T,g,!0),g=T):(delete l[d],p(T)):u[d]=g),f(g)!==!1&&(e.appendChild(g),N(g)),g.nodeType===ELEMENT_NODE&&(d||g.firstChild)&&b.push(g),g=v,C=E}for(;C;)E=C.nextSibling,a(C,e,n),C=E}var S=specialElHandlers[e.nodeName];S&&S(e,t)}if(n||(n={}),"string"==typeof t)if("#document"===e.nodeName||"HTML"===e.nodeName){var d=t;t=document.createElement("html"),t.innerHTML=d}else t=toElement(t);var l={},u={},c=n.getNodeKey||defaultGetNodeKey,f=n.onBeforeNodeAdded||noop,N=n.onNodeAdded||noop,m=n.onBeforeElUpdated||n.onBeforeMorphEl||noop,s=n.onElUpdated||noop,E=n.onBeforeNodeDiscarded||noop,p=n.onNodeDiscarded||noop,h=n.onBeforeElChildrenUpdated||n.onBeforeMorphElChildren||noop,v=n.childrenOnly===!0,b=[],T=e,A=T.nodeType,g=t.nodeType;if(!v)if(A===ELEMENT_NODE)g===ELEMENT_NODE?compareNodeNames(e,t)||(p(e),T=moveChildren(e,createElementNS(t.nodeName,t.namespaceURI))):T=t;else if(A===TEXT_NODE||A===COMMENT_NODE){if(g===A)return T.nodeValue=t.nodeValue,T;T=t}if(T===t)p(e);else{i(T,t,!1,v);var C=function(e){for(var t=e.firstChild;t;){var n=t.nextSibling,r=c(t);if(r){var o=l[r];if(o&&compareNodeNames(t,o)){if(t.parentNode.replaceChild(o,t),i(o,t,!0),t=n,empty(l))return!1;continue}}t.nodeType===ELEMENT_NODE&&C(t),t=n}};if(!empty(l))e:for(;b.length;){var y=b;b=[];for(var O=0;O<y.length;O++)if(C(y[O])===!1)break e}for(var M in l)if(l.hasOwnProperty(M)){var S=l[M];p(S),o(S)}}return!v&&T!==e&&e.parentNode&&e.parentNode.replaceChild(T,e),T}var range,testEl="undefined"!=typeof document?document.body||document.createElement("div"):{},XHTML="http://www.w3.org/1999/xhtml",ELEMENT_NODE=1,TEXT_NODE=3,COMMENT_NODE=8,hasAttributeNS;hasAttributeNS=testEl.hasAttributeNS?function(e,t,n){return e.hasAttributeNS(t,n)}:testEl.hasAttribute?function(e,t,n){return e.hasAttribute(n)}:function(e,t,n){return!!e.getAttributeNode(n)};var specialElHandlers={OPTION:function(e,t){e.selected=t.selected,e.selected?e.setAttribute("selected",""):e.removeAttribute("selected","")},INPUT:function(e,t){e.checked=t.checked,e.checked?e.setAttribute("checked",""):e.removeAttribute("checked"),e.value!==t.value&&(e.value=t.value),hasAttributeNS(t,null,"value")||e.removeAttribute("value"),e.disabled=t.disabled,e.disabled?e.setAttribute("disabled",""):e.removeAttribute("disabled")},TEXTAREA:function(e,t){var n=t.value;e.value!==n&&(e.value=n),e.firstChild&&(e.firstChild.nodeValue=n)}},compareNodeNames=function(e,t){return e.nodeName===t.nodeName&&e.namespaceURI===t.namespaceURI};module.exports=morphdom;

},{}],17:[function(require,module,exports){
function turnon(t,e){watch[t][0]&&0===watch[t][2]&&(watch[t][0](e),watch[t][2]=1)}function turnoff(t,e){watch[t][1]&&1===watch[t][2]&&(watch[t][1](e),watch[t][2]=0)}function eachAttr(t,e,a){var r=t.target.getAttribute(KEY_ATTR);return sameOrigin(t.oldValue,r)?void(watch[r]=watch[t.oldValue]):(watch[t.oldValue]&&a(t.oldValue,t.target),void(watch[r]&&e(r,t.target)))}function sameOrigin(t,e){return!(!t||!e)&&watch[t][3]===watch[e][3]}function eachMutation(t,e){for(var a=Object.keys(watch),r=0;r<t.length;r++){if(t[r]&&t[r].getAttribute&&t[r].getAttribute(KEY_ATTR)){var n=t[r].getAttribute(KEY_ATTR);a.forEach(function(a){n===a&&e(a,t[r])})}t[r].childNodes.length>0&&eachMutation(t[r].childNodes,e)}}var document=require("global/document"),window=require("global/window"),watch=Object.create(null),KEY_ID="onloadid"+(new Date%9e6).toString(36),KEY_ATTR="data-"+KEY_ID,INDEX=0;if(window&&window.MutationObserver){var observer=new MutationObserver(function(t){if(!(Object.keys(watch).length<1))for(var e=0;e<t.length;e++)t[e].attributeName!==KEY_ATTR?(eachMutation(t[e].removedNodes,turnoff),eachMutation(t[e].addedNodes,turnon)):eachAttr(t[e],turnon,turnoff)});observer.observe(document.body,{childList:!0,subtree:!0,attributes:!0,attributeOldValue:!0,attributeFilter:[KEY_ATTR]})}module.exports=function t(e,a,r,n){return a=a||function(){},r=r||function(){},e.setAttribute(KEY_ATTR,"o"+INDEX),watch["o"+INDEX]=[a,r,0,n||t.caller],INDEX+=1,e};

},{"global/document":7,"global/window":8}],18:[function(require,module,exports){
var trim=require("trim"),forEach=require("for-each"),isArray=function(r){return"[object Array]"===Object.prototype.toString.call(r)};module.exports=function(r){if(!r)return{};var e={};return forEach(trim(r).split("\n"),function(r){var t=r.indexOf(":"),i=trim(r.slice(0,t)).toLowerCase(),o=trim(r.slice(t+1));"undefined"==typeof e[i]?e[i]=o:isArray(e[i])?e[i].push(o):e[i]=[e[i],o]}),e};

},{"for-each":6,"trim":59}],19:[function(require,module,exports){
function cleanUpNextTick(){draining&&currentQueue&&(draining=!1,currentQueue.length?queue=currentQueue.concat(queue):queueIndex=-1,queue.length&&drainQueue())}function drainQueue(){if(!draining){var e=cachedSetTimeout(cleanUpNextTick);draining=!0;for(var r=queue.length;r;){for(currentQueue=queue,queue=[];++queueIndex<r;)currentQueue&&currentQueue[queueIndex].run();queueIndex=-1,r=queue.length}currentQueue=null,draining=!1,cachedClearTimeout(e)}}function Item(e,r){this.fun=e,this.array=r}function noop(){}var process=module.exports={},cachedSetTimeout,cachedClearTimeout;!function(){try{cachedSetTimeout=setTimeout}catch(e){cachedSetTimeout=function(){throw new Error("setTimeout is not defined")}}try{cachedClearTimeout=clearTimeout}catch(e){cachedClearTimeout=function(){throw new Error("clearTimeout is not defined")}}}();var queue=[],draining=!1,currentQueue,queueIndex=-1;process.nextTick=function(e){var r=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)r[n-1]=arguments[n];queue.push(new Item(e,r)),1!==queue.length||draining||cachedSetTimeout(drainQueue,0)},Item.prototype.run=function(){this.fun.apply(null,this.array)},process.title="browser",process.browser=!0,process.env={},process.argv=[],process.version="",process.versions={},process.on=noop,process.addListener=noop,process.once=noop,process.off=noop,process.removeListener=noop,process.removeAllListeners=noop,process.emit=noop,process.binding=function(e){throw new Error("process.binding is not supported")},process.cwd=function(){return"/"},process.chdir=function(e){throw new Error("process.chdir is not supported")},process.umask=function(){return 0};

},{}],20:[function(require,module,exports){
function abortAll(n,t,o){function l(){--u||o(t)}var u=n.length;return u?(n.forEach(function(n){n?n(t,l):l()}),void(u||l())):o(t)}var noop=function(){};module.exports=function(n){return function(t,o){!function l(){t?abortAll(n,t,o):n.length?n[0]?n[0](null,function(t,u){t?(n.shift(),t===!0?l():abortAll(n,t,o)):o(null,u)}):(n.shift(),l()):o(!0)}()}};

},{}],21:[function(require,module,exports){
var Source=require("./source"),Sink=require("./sink");module.exports=function(){var e=Source(),r=Sink();return{source:e,sink:r,resolve:function(o){e.resolve(o.source),r.resolve(o.sink)}}};

},{"./sink":23,"./source":24}],22:[function(require,module,exports){
exports.source=require("./source"),exports.through=require("./through"),exports.sink=require("./sink"),exports.duplex=require("./duplex");

},{"./duplex":21,"./sink":23,"./source":24,"./through":25}],23:[function(require,module,exports){
module.exports=function(r){function e(e){if(!e)throw new Error("must be passed a readable");t=e,n&&r(t)}var t,n=!1;Math.random();return e.resolve=e.ready=e.start=function(a){return n=!0,r=a||r,t&&r(t),e},e};

},{}],24:[function(require,module,exports){
module.exports=function(){var r,o,n,e,t=function(t,l){r?r(t,l):t?(e=t,n=l):o=l};return t.resolve=function(t){if(r)throw new Error("already resolved");if(r=t,!r)throw new Error("no read cannot resolve!"+r);o&&t(null,o),n&&t(e,n)},t.abort=function(r){t.resolve(function(o,n){n(r||!0)})},t};

},{}],25:[function(require,module,exports){
module.exports=function(){function r(r){return s?s(r):(e=r,function(r,e){o?o(r,e):(t=r,n=e)})}var e,o,n,t,s;return r.resolve=function(r){if(s)throw new Error("already resolved");if(s=r,!s)throw new Error("resolve *must* be passed a transform stream");e&&(o=s(e),n&&o(t,n))},r};

},{}],26:[function(require,module,exports){
var pushable=require("pull-pushable");module.exports=function(){function n(n){for(var e=0;e<r.length;e++)r[e].push(n);return n}var r=[];return n.listen=function(){var n=pushable(function(){var e=r.indexOf(n);e!==-1&&r.splice(e,1)});return r.push(n),n},n.abort=function(n){for(;r.length;)r[0].end(n)},n.end=function(){return n.abort(!0)},n};

},{"pull-pushable":27}],27:[function(require,module,exports){
function pullPushable(n){function u(n,u){n&&(i=n,f&&t(i)),f=u,l()}function l(){f&&(i?t(i):!o.length&&e?t(e):o.length&&t(null,o.shift()))}function t(u,l){var t=f;if(u&&n){var i=n;n=null,i(u===!0?null:u)}f=null,t(u,l)}var i,f,e,o=[];return u.end=function(n){e=e||n||!0,l()},u.push=function(n){if(!e){if(f)return void t(i,n);o.push(n),l()}},u}module.exports=pullPushable;

},{}],28:[function(require,module,exports){
"use strict";var sources=require("./sources"),sinks=require("./sinks"),throughs=require("./throughs");exports=module.exports=require("./pull");for(var k in sources)exports[k]=sources[k];for(var k in throughs)exports[k]=throughs[k];for(var k in sinks)exports[k]=sinks[k];

},{"./pull":29,"./sinks":34,"./sources":41,"./throughs":50}],29:[function(require,module,exports){
"use strict";module.exports=function r(n){var t=arguments.length;if("function"==typeof n&&1===n.length){for(var e=new Array(t),o=0;o<t;o++)e[o]=arguments[o];return function(n){return e.unshift(n),r.apply(null,e)}}var u=n;u&&"function"==typeof u.source&&(u=u.source);for(var o=1;o<t;o++){var f=arguments[o];"function"==typeof f?u=f(u):f&&"object"==typeof f&&(f.sink(u),u=f.source)}return u};

},{}],30:[function(require,module,exports){
"use strict";var reduce=require("./reduce");module.exports=function(e){return reduce(function(e,r){return e.push(r),e},[],e)};

},{"./reduce":37}],31:[function(require,module,exports){
"use strict";var reduce=require("./reduce");module.exports=function(e){return reduce(function(e,r){return e+r},"",e)};

},{"./reduce":37}],32:[function(require,module,exports){
"use strict";module.exports=function(n,t){function o(u){return i=u,r?o.abort():void function f(){for(var o=!0,u=!1;o;)if(u=!1,i(null,function(e,c){if(u=!0,e=e||r){if(o=!1,t)t(e===!0?null:e);else if(e&&e!==!0)throw e}else n&&!1===n(c)||r?(o=!1,i(r||!0,t||function(){})):o||f()}),!u)return void(o=!1)}()}var i,r;return o.abort=function(n,t){if("function"==typeof n&&(t=n,n=!0),r=n||!0,i)return i(r,t||function(){})},o};

},{}],33:[function(require,module,exports){
"use strict";function id(r){return r}var prop=require("../util/prop"),drain=require("./drain");module.exports=function(r,n){var i=!1;return n?r=prop(r)||id:(n=r,r=id),drain(function(u){if(r(u))return i=!0,n(null,u),!1},function(r){i||n(r===!0?null:r,null)})};

},{"../util/prop":57,"./drain":32}],34:[function(require,module,exports){
"use strict";module.exports={drain:require("./drain"),onEnd:require("./on-end"),log:require("./log"),find:require("./find"),reduce:require("./reduce"),collect:require("./collect"),concat:require("./concat")};

},{"./collect":30,"./concat":31,"./drain":32,"./find":33,"./log":35,"./on-end":36,"./reduce":37}],35:[function(require,module,exports){
"use strict";var drain=require("./drain");module.exports=function(r){return drain(function(r){console.log(r)},r)};

},{"./drain":32}],36:[function(require,module,exports){
"use strict";var drain=require("./drain");module.exports=function(r){return drain(null,r)};

},{"./drain":32}],37:[function(require,module,exports){
"use strict";var drain=require("./drain");module.exports=function(n,r,i){return drain(function(i){r=n(r,i)},function(n){i(n,r)})};

},{"./drain":32}],38:[function(require,module,exports){
"use strict";module.exports=function(n){var r=0;return n=n||1/0,function(t,u){return t?u&&u(t):r>n?u(!0):void u(null,r++)}};

},{}],39:[function(require,module,exports){
"use strict";module.exports=function(){return function(t,n){n(!0)}};

},{}],40:[function(require,module,exports){
"use strict";module.exports=function(t){return function(n,u){u(t)}};

},{}],41:[function(require,module,exports){
"use strict";module.exports={keys:require("./keys"),once:require("./once"),values:require("./values"),count:require("./count"),infinite:require("./infinite"),empty:require("./empty"),error:require("./error")};

},{"./count":38,"./empty":39,"./error":40,"./infinite":42,"./keys":43,"./once":44,"./values":45}],42:[function(require,module,exports){
"use strict";module.exports=function(n){return n=n||Math.random,function(t,r){return t?r&&r(t):r(null,n())}};

},{}],43:[function(require,module,exports){
"use strict";var values=require("./values");module.exports=function(e){return values(Object.keys(e))};

},{"./values":45}],44:[function(require,module,exports){
"use strict";var abortCb=require("../util/abort-cb");module.exports=function(r,t){return function(u,e){if(u)return abortCb(e,u,t);if(null!=r){var l=r;r=null,e(null,l)}else e(!0)}};

},{"../util/abort-cb":56}],45:[function(require,module,exports){
"use strict";var abortCb=require("../util/abort-cb");module.exports=function(r,t){if(!r)return function(r,n){return r?abortCb(n,r,t):n(!0)};Array.isArray(r)||(r=Object.keys(r).map(function(t){return r[t]}));var n=0;return function(u,e){return u?abortCb(e,u,t):void e(n>=r.length||null,r[n++])}};

},{"../util/abort-cb":56}],46:[function(require,module,exports){
"use strict";function id(n){return n}var prop=require("../util/prop");module.exports=function(n){if(!n)return id;n=prop(n);var r,u,t=!1;return function(i){return function o(e,c){return u?c(u):void(e?(u=e,t?i(e,function(){t?r=c:c(e)}):i(e,c)):i(null,function(i,e){i?c(i):u?c(u):(t=!0,n(e,function(n,i){t=!1,u?(c(u),r(u)):n?o(n,c):c(null,i)}))}))}}};

},{"../util/prop":57}],47:[function(require,module,exports){
"use strict";var tester=require("../util/tester"),filter=require("./filter");module.exports=function(e){return e=tester(e),filter(function(r){return!e(r)})};

},{"../util/tester":58,"./filter":48}],48:[function(require,module,exports){
"use strict";var tester=require("../util/tester");module.exports=function(t){return t=tester(t),function(r){return function e(n,u){for(var i,o=!0;o;)o=!1,i=!0,r(n,function(r,n){return r||t(n)?void u(r,n):i?o=!0:e(r,u)}),i=!1}}};

},{"../util/tester":58}],49:[function(require,module,exports){
"use strict";var values=require("../sources/values"),once=require("../sources/once");module.exports=function(){return function(n){var u;return function(e,o){function r(){u(null,function(u,e){u===!0?t():u?n(!0,function(n){o(u)}):o(null,e)})}function t(){u=null,n(null,function(n,e){return n?o(n):(Array.isArray(e)||e&&"object"==typeof e?e=values(e):"function"!=typeof e&&(e=once(e)),u=e,void r())})}e?u?u(e,function(u){n(u||e,o)}):n(e,o):u?r():t()}}};

},{"../sources/once":44,"../sources/values":45}],50:[function(require,module,exports){
"use strict";module.exports={map:require("./map"),asyncMap:require("./async-map"),filter:require("./filter"),filterNot:require("./filter-not"),through:require("./through"),take:require("./take"),unique:require("./unique"),nonUnique:require("./non-unique"),flatten:require("./flatten")};

},{"./async-map":46,"./filter":48,"./filter-not":47,"./flatten":49,"./map":51,"./non-unique":52,"./take":53,"./through":54,"./unique":55}],51:[function(require,module,exports){
"use strict";function id(r){return r}var prop=require("../util/prop");module.exports=function(r){return r?(r=prop(r),function(n){return function(t,u){n(t,function(t,i){try{i=t?null:r(i)}catch(o){return n(o,function(){return u(o)})}u(t,i)})}}):id};

},{"../util/prop":57}],52:[function(require,module,exports){
"use strict";var unique=require("./unique");module.exports=function(u){return unique(u,!0)};

},{"./unique":55}],53:[function(require,module,exports){
"use strict";module.exports=function(n,u){u=u||{};var t=u.last||!1,r=!1;if("number"==typeof n){t=!0;var o=n;n=function(){return--o}}return function(u){function o(n){u(!0,function(u){t=!1,n(u||!0)})}return function(f,i){r?t?o(i):i(r):(r=f)?u(r,i):u(null,function(u,f){(r=r||u)?i(r):n(f)?i(null,f):(r=!0,t?i(null,f):o(i))})}}};

},{}],54:[function(require,module,exports){
"use strict";module.exports=function(n,t){function u(n){!r&&t&&(r=!0,t(n===!0?null:n))}var r=!1;return function(t){return function(r,o){return r&&u(r),t(r,function(t,r){t?u(t):n&&n(r),o(t,r)})}}};

},{}],55:[function(require,module,exports){
"use strict";function id(r){return r}var prop=require("../util/prop"),filter=require("./filter");module.exports=function(r,e){r=prop(r)||id;var t={};return filter(function(i){var u=r(i);return t[u]?!!e:(t[u]=!0,!e)})};

},{"../util/prop":57,"./filter":48}],56:[function(require,module,exports){
module.exports=function(l,n,o){l(n),o&&o(n===!0?null:n)};

},{}],57:[function(require,module,exports){
module.exports=function(e){return e&&("string"==typeof e?function(t){return t[e]}:"object"==typeof e&&"function"==typeof e.exec?function(t){var n=e.exec(t);return n&&n[0]}:e)};

},{}],58:[function(require,module,exports){
function id(t){return t}var prop=require("./prop");module.exports=function(t){return"object"==typeof t&&"function"==typeof t.test?function(r){return t.test(r)}:prop(t)||id};

},{"./prop":57}],59:[function(require,module,exports){
function trim(r){return r.replace(/^\s*|\s*$/g,"")}exports=module.exports=trim,exports.left=function(r){return r.replace(/^\s*/,"")},exports.right=function(r){return r.replace(/\s*$/,"")};

},{}],60:[function(require,module,exports){
"use strict";function forEachArray(e,t){for(var r=0;r<e.length;r++)t(e[r])}function isEmpty(e){for(var t in e)if(e.hasOwnProperty(t))return!1;return!0}function initParams(e,t,r){var n=e;return isFunction(t)?(r=t,"string"==typeof e&&(n={uri:e})):n=xtend(t,{uri:e}),n.callback=r,n}function createXHR(e,t,r){return t=initParams(e,t,r),_createXHR(t)}function _createXHR(e){function t(){4===i.readyState&&o()}function r(){var e=void 0;if(e=i.response?i.response:i.responseText||getXml(i),X)try{e=JSON.parse(e)}catch(t){}return e}function n(e){clearTimeout(p),e instanceof Error||(e=new Error(""+(e||"Unknown XMLHttpRequest Error"))),e.statusCode=0,s(e,a),s=noop}function o(){if(!c){var t;clearTimeout(p),t=e.useXDR&&void 0===i.status?200:1223===i.status?204:i.status;var n=a,o=null;0!==t?(n={body:r(),statusCode:t,method:l,headers:{},url:d,rawRequest:i},i.getAllResponseHeaders&&(n.headers=parseHeaders(i.getAllResponseHeaders()))):o=new Error("Internal XMLHttpRequest Error"),s(o,n,n.body),s=noop}}var s=e.callback;if("undefined"==typeof s)throw new Error("callback argument missing");var a={body:void 0,headers:{},statusCode:0,method:l,url:d,rawRequest:i},i=e.xhr||null;i||(i=e.cors||e.useXDR?new createXHR.XDomainRequest:new createXHR.XMLHttpRequest);var u,c,p,d=i.url=e.uri||e.url,l=i.method=e.method||"GET",f=e.body||e.data||null,m=i.headers=e.headers||{},R=!!e.sync,X=!1;if("json"in e&&(X=!0,m.accept||m.Accept||(m.Accept="application/json"),"GET"!==l&&"HEAD"!==l&&(m["content-type"]||m["Content-Type"]||(m["Content-Type"]="application/json"),f=JSON.stringify(e.json))),i.onreadystatechange=t,i.onload=o,i.onerror=n,i.onprogress=function(){},i.ontimeout=n,i.open(l,d,!R,e.username,e.password),R||(i.withCredentials=!!e.withCredentials),!R&&e.timeout>0&&(p=setTimeout(function(){c=!0,i.abort("timeout");var e=new Error("XMLHttpRequest timeout");e.code="ETIMEDOUT",n(e)},e.timeout)),i.setRequestHeader)for(u in m)m.hasOwnProperty(u)&&i.setRequestHeader(u,m[u]);else if(e.headers&&!isEmpty(e.headers))throw new Error("Headers cannot be set on an XDomainRequest object");return"responseType"in e&&(i.responseType=e.responseType),"beforeSend"in e&&"function"==typeof e.beforeSend&&e.beforeSend(i),i.send(f),i}function getXml(e){if("document"===e.responseType)return e.responseXML;var t=204===e.status&&e.responseXML&&"parsererror"===e.responseXML.documentElement.nodeName;return""!==e.responseType||t?null:e.responseXML}function noop(){}var window=require("global/window"),isFunction=require("is-function"),parseHeaders=require("parse-headers"),xtend=require("xtend");module.exports=createXHR,createXHR.XMLHttpRequest=window.XMLHttpRequest||noop,createXHR.XDomainRequest="withCredentials"in new createXHR.XMLHttpRequest?createXHR.XMLHttpRequest:window.XDomainRequest,forEachArray(["get","put","post","patch","head","delete"],function(e){createXHR["delete"===e?"del":e]=function(t,r,n){return r=initParams(t,r,n),r.method=e.toUpperCase(),_createXHR(r)}});

},{"global/window":8,"is-function":15,"parse-headers":18,"xtend":61}],61:[function(require,module,exports){
function extend(){for(var r={},e=0;e<arguments.length;e++){var t=arguments[e];for(var n in t)hasOwnProperty.call(t,n)&&(r[n]=t[n])}return r}module.exports=extend;var hasOwnProperty=Object.prototype.hasOwnProperty;

},{}],62:[function(require,module,exports){
var bel=require("bel"),morphdom=require("morphdom"),defaultEvents=require("./update-events.js");module.exports=bel,module.exports.update=function(e,o,r){function t(e,o){for(var t=r.events||defaultEvents,n=0;n<t.length;n++){var u=t[n];o[u]?e[u]=o[u]:e[u]&&(e[u]=void 0)}("INPUT"===e.nodeName&&"file"!==e.type||"TEXTAREA"===e.nodeName||"SELECT"===e.nodeName)&&null===o.getAttribute("value")&&(o.value=e.value)}return r||(r={}),r.events!==!1&&(r.onBeforeMorphEl||(r.onBeforeMorphEl=t)),morphdom(e,o,r)};

},{"./update-events.js":63,"bel":3,"morphdom":16}],63:[function(require,module,exports){
module.exports=["onclick","ondblclick","onmousedown","onmouseup","onmouseover","onmousemove","onmouseout","ondragstart","ondrag","ondragenter","ondragleave","ondragover","ondrop","ondragend","onkeydown","onkeypress","onkeyup","onunload","onabort","onerror","onresize","onscroll","onselect","onchange","onsubmit","onreset","onfocus","onblur","oninput","oncontextmenu","onfocusin","onfocusout"];

},{}]},{},[2])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
